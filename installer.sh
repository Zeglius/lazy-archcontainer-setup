#!/usr/bin/bash

# @version 1.0

# @describe Script to install common utilities for archlinux interactve containers.
# Utilities include: git, paru

# Check we are running in an archlinux container
check_os() {
    set -euo pipefail
    # Are we in a container?
    if ! systemd-detect-virt --container >/dev/null; then
        echo >&2 "ERROR: Environment is not a container!"
        return 1
    fi

    # Are we running in an archlinux container?
    if ! grep -qP '^ID=arch$' /etc/os-release; then
        echo >&2 "ERROR: Environment is not an archlinux container!"
        return 1
    fi

    return 0
}

# @cmd Install paru
install_paru() {
    set -euo pipefail
    check_os
    sudo pacman -S --needed --noconfirm base-devel git
    pushd .
    cd $(mktemp -d)
    trap 'rm -rf "$PWD"' RETURN
    git clone --depth=1 https://aur.archlinux.org/paru-bin.git paru
    cd paru
    makepkg -si
    popd
}

# @cmd Install all utilities
all() {
    install_paru
}

# ARGC-BUILD {
# This block was generated by argc (https://github.com/sigoden/argc).
# Modifying it manually is not recommended

_argc_run() {
    if [[ "${1:-}" == "___internal___" ]]; then
        _argc_die "error: unsupported ___internal___ command"
    fi
    if [[ "${OS:-}" == "Windows_NT" ]] && [[ -n "${MSYSTEM:-}" ]]; then
        set -o igncr
    fi
    argc__args=("$(basename "$0" .sh)" "$@")
    argc__positionals=()
    _argc_index=1
    _argc_len="${#argc__args[@]}"
    _argc_tools=()
    _argc_parse
    if [ -n "${argc__fn:-}" ]; then
        $argc__fn "${argc__positionals[@]}"
    fi
}

_argc_usage() {
    cat <<-'EOF'
installer-src 1.0
Script to install common utilities for archlinux interactve containers.
Utilities include: git, paru

USAGE: installer-src <COMMAND>

COMMANDS:
  install_paru  Install paru [aliases: install-paru]
  all           Install all utilities
EOF
    exit
}

_argc_version() {
    echo installer-src 1.0
    exit
}

_argc_parse() {
    local _argc_key _argc_action
    local _argc_subcmds="install_paru, install-paru, all"
    while [[ $_argc_index -lt $_argc_len ]]; do
        _argc_item="${argc__args[_argc_index]}"
        _argc_key="${_argc_item%%=*}"
        case "$_argc_key" in
        --help | -help | -h)
            _argc_usage
            ;;
        --version | -version | -V)
            _argc_version
            ;;
        --)
            _argc_dash="${#argc__positionals[@]}"
            argc__positionals+=("${argc__args[@]:$((_argc_index + 1))}")
            _argc_index=$_argc_len
            break
            ;;
        install_paru | install-paru)
            _argc_index=$((_argc_index + 1))
            _argc_action=_argc_parse_install_paru
            break
            ;;
        all)
            _argc_index=$((_argc_index + 1))
            _argc_action=_argc_parse_all
            break
            ;;
        help)
            local help_arg="${argc__args[$((_argc_index + 1))]:-}"
            case "$help_arg" in
            install_paru | install-paru)
                _argc_usage_install_paru
                ;;
            all)
                _argc_usage_all
                ;;
            "")
                _argc_usage
                ;;
            *)
                _argc_die "error: invalid value \`$help_arg\` for \`<command>\`"$'\n'"  [possible values: $_argc_subcmds]"
                ;;
            esac
            ;;
        *)
            _argc_die "error: \`installer-src\` requires a subcommand but one was not provided"$'\n'"  [subcommands: $_argc_subcmds]"
            ;;
        esac
    done
    if [[ -n "${_argc_action:-}" ]]; then
        $_argc_action
    else
        _argc_usage
    fi
}

_argc_usage_install_paru() {
    cat <<-'EOF'
Install paru

USAGE: installer-src install_paru
EOF
    exit
}

_argc_parse_install_paru() {
    local _argc_key _argc_action
    local _argc_subcmds=""
    while [[ $_argc_index -lt $_argc_len ]]; do
        _argc_item="${argc__args[_argc_index]}"
        _argc_key="${_argc_item%%=*}"
        case "$_argc_key" in
        --help | -help | -h)
            _argc_usage_install_paru
            ;;
        --)
            _argc_dash="${#argc__positionals[@]}"
            argc__positionals+=("${argc__args[@]:$((_argc_index + 1))}")
            _argc_index=$_argc_len
            break
            ;;
        *)
            argc__positionals+=("$_argc_item")
            _argc_index=$((_argc_index + 1))
            ;;
        esac
    done
    if [[ -n "${_argc_action:-}" ]]; then
        $_argc_action
    else
        argc__fn=install_paru
        if [[ "${argc__positionals[0]:-}" == "help" ]] && [[ "${#argc__positionals[@]}" -eq 1 ]]; then
            _argc_usage_install_paru
        fi
    fi
}

_argc_usage_all() {
    cat <<-'EOF'
Install all utilities

USAGE: installer-src all
EOF
    exit
}

_argc_parse_all() {
    local _argc_key _argc_action
    local _argc_subcmds=""
    while [[ $_argc_index -lt $_argc_len ]]; do
        _argc_item="${argc__args[_argc_index]}"
        _argc_key="${_argc_item%%=*}"
        case "$_argc_key" in
        --help | -help | -h)
            _argc_usage_all
            ;;
        --)
            _argc_dash="${#argc__positionals[@]}"
            argc__positionals+=("${argc__args[@]:$((_argc_index + 1))}")
            _argc_index=$_argc_len
            break
            ;;
        *)
            argc__positionals+=("$_argc_item")
            _argc_index=$((_argc_index + 1))
            ;;
        esac
    done
    if [[ -n "${_argc_action:-}" ]]; then
        $_argc_action
    else
        argc__fn=all
        if [[ "${argc__positionals[0]:-}" == "help" ]] && [[ "${#argc__positionals[@]}" -eq 1 ]]; then
            _argc_usage_all
        fi
    fi
}

_argc_die() {
    if [[ $# -eq 0 ]]; then
        cat
    else
        echo "$*" >&2
    fi
    exit 1
}

_argc_run "$@"

# ARGC-BUILD }
